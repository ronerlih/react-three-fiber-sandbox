{"version":3,"sources":["logo.svg","components/Log/style.module.css","components/Log/index.js","components/Box/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Log","props","deconstructedObject","useMemo","inputObject","maxDepth","depthCount","deconstruct","obj","Object","entries","length","console","log","map","key","val","validatePrimitive","style","textIndent","toString","deconstructObject","boxState","className","Box","mesh","useRef","useState","hovered","setHover","toggle","settoggle","setBoxState","e","position","useFrame","animate","current","rotation","x","y","ref","scale","onClick","onPointerOver","onPointerOut","attach","args","color","opacity","App","useThree","size","useControl","group","type","src","logo","alt","width","lookAt","nOfBoxes","Array","fill","box","i","Math","cos","sin","generateBoxes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a7fe2883.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"log\":\"style_log__9Ys6i\"};","// import deconstructObject from \"../../Utils/deconstructObject\"\nimport React, { useMemo } from 'react'\nimport style from './style.module.css'\n\nfunction deconstructObject(inputObject, maxDepth = 10) {\n   let depthCount = 0\n   return deconstruct(inputObject);\n\n   function deconstruct(obj){\n\n      if (!Object.entries(obj).length || depthCount >= maxDepth) return <></>;\n      depthCount++;\n\n      console.log(obj)\n      return Object.entries(obj)\n      .map( ([key, val]) => \n         <div key={key}>\n            {key} : {validatePrimitive(val) ? (<div style={{textIndent:20}}>{deconstruct(val)}</div>) : val.toString() }\n         </div>\n      )\n   }\n   function validatePrimitive(val){\n     return typeof val === 'object' && val !== null\n   }\n}\n\nexport default function Log(props) {\n   const deconstructedObject = useMemo(() => deconstructObject(props.boxState, 2), [props.boxState])\n   return (\n      <div className={style.log}>\n         ðŸ“¦ Box Log (hover)\n         {deconstructedObject}\n      </div>\n\n   )\n}\n","import React, { useRef, useState, useEffect } from 'react'\nimport { useFrame } from 'react-three-fiber'\n\nexport default function Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n\n  // Set up state for the hovered and toggle state\n  const [hovered, setHover] = useState(false)\n  const [toggle, settoggle] = useState(false)\n  \n  const setBoxState = e => {\n     props.setBoxState({ toggle, hovered, position: props.position.toString() })\n  }\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => props.animate ? (mesh.current.rotation.x = mesh.current.rotation.y += 0.01) : null)\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={toggle ? [2.5, 2.5, 2.5] : [1.5, 1.5, 1.5]}\n      onClick={(e) => {settoggle(!toggle); return setBoxState(e)}}\n      onPointerOver={(e) => {setHover(false);return setBoxState(e)}}\n      onPointerOut={(e) => {setHover(true); return setBoxState(e)}} >\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n      <meshStandardMaterial attach=\"material\" color={hovered ? 'hotpink' : props.color ? props.color : 'orange'} opacity={0.8} />\n    </mesh>\n  )\n}","import React, { useRef, useState } from 'react';\nimport { Canvas, useThree, useFrame, extend } from 'react-three-fiber'\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { Controls, useControl } from 'react-three-gui';\nimport logo from './logo.svg';\nimport Camera from \"./components/Camera\"\nimport Log from \"./components/Log\"\nimport Box from \"./components/Box\"\nimport './App.css';\n\n\nconst generateBoxes = (nOfBoxes, setBoxState)  => \n  Array(nOfBoxes).fill(1)\n      .map( (box, i) => {\n        const RADIUS = 2;\n        const x = 0 + RADIUS * Math.cos(360/nOfBoxes * box * i)\n        const y = 0 + RADIUS * Math.sin(360/nOfBoxes * box * i)\n            return <Box key={i} position={[x, y, 0]} setBoxState={setBoxState} animate/>\n      }\n      )\n\n\nfunction App() {\n  const [boxState, setBoxState] = useState({})\n  const [boxPosition, setPosition] = useState([0,0,0])\n  const { size } = useThree();\n\n  // debudding GUI\n  const rotationX = useControl('rotationx', { group: 'Test', type: 'number' });\n  const rotationY = useControl('rotationy', { group: 'Test', type: 'number' });\n  const rotationZ = useControl('rotationz', { group: 'Test', type: 'number' });\n  const colorGUI = useControl('Material color', { group: 'Test', type: 'color' });\n\n  return (\n    <div className=\"App\">\n      <img src={logo} className=\"App-logo spin\" alt=\"logo\" style={{width:50}} />\n      <header className=\"App-header\">\n        <Log boxState={boxState} />\n        <Canvas style={{position:\"absolute\"}} >\n          {/* <Camera position={[0, 0, 10]} /> */}\n\n          {/* <gridHelper args={[size,10]} /> */}\n          <ambientLight />\n          <pointLight position={[10, 10, 10]} lookAt={[0,0,0]} />\n          {/* <Box \n            position={boxPosition} \n            setBoxState={setBoxState}\n            rotation-x={rotationX}\n            rotation-y={rotationY}\n            rotation-z={rotationZ}\n            // color={colorGUI}\n            animate\n            /> */}\n            {generateBoxes(100, setBoxState)}\n        </Canvas>\n        {/* <Controls /> */}\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}